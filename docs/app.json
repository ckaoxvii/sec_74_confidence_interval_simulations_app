[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(dplyr)\n\nui <- page_sidebar(\n  title = \"Confidence Interval Simulation for Population Proportion\",\n  theme = bs_theme(\n    primary = \"#A90533\",\n    \"navbar-bg\" = \"#A90533\",\n    \"card-header-bg\" = \"#A90533\",\n    \"card-header-color\" = \"white\"\n  ),\n  # Add custom CSS to ensure card headers have the correct styling\n  tags$head(\n    tags$style(HTML(\"\n      .card-header {\n        background-color: #A90533 !important;\n        color: white !important;\n        font-weight: bold;\n      }\n    \"))\n  ),\n  sidebar = sidebar(\n    numericInput(\"true_prop\", \n                 \"True Population Proportion:\", \n                 value = 0.6, \n                 min = 0.01, \n                 max = 0.99, \n                 step = 0.01),\n    \n    numericInput(\"sample_size\", \n                 \"Sample Size (n):\", \n                 value = 100, \n                 min = 10, \n                 max = 1000, \n                 step = 10),\n    \n    numericInput(\"conf_level\", \n                 \"Confidence Level (%):\", \n                 value = 95, \n                 min = 80, \n                 max = 99, \n                 step = 1),\n    \n    numericInput(\"n_simulations\", \n                 \"Number of Simulations:\", \n                 value = 50, \n                 min = 10, \n                 max = 100, \n                 step = 5),\n    \n    actionButton(\"simulate\", \n                 \"Run Simulation\", \n                 style = \"background-color: #A90533; border-color: #A90533; color: white;\"),\n  ),\n  \n  layout_columns(\n    card(\n      card_header(\"Confidence Interval Visualization\"),\n      plotOutput(\"ci_plot\", height = \"500px\")\n    ),\n    card(\n      card_header(\"Simulation Results\"),\n      tableOutput(\"results_table\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Reactive value to store simulation results\n  sim_results <- reactiveVal(NULL)\n  \n  # Function to calculate confidence interval\n  calculate_ci <- function(x, n, conf_level) {\n    p_hat <- x / n\n    alpha <- 1 - (conf_level / 100)\n    z_score <- qnorm(1 - alpha/2)\n    \n    se <- sqrt(p_hat * (1 - p_hat) / n)\n    margin_error <- z_score * se\n    \n    lower <- p_hat - margin_error\n    upper <- p_hat + margin_error\n    \n    # Ensure bounds are within [0, 1]\n    lower <- pmax(0, lower)\n    upper <- pmin(1, upper)\n    \n    return(data.frame(\n      p_hat = p_hat,\n      lower = lower,\n      upper = upper,\n      margin_error = margin_error\n    ))\n  }\n  \n  # Run simulation when button is pressed\n  observeEvent(input$simulate, {\n    # Generate random samples and calculate confidence intervals\n    results <- data.frame(\n      simulation = 1:input$n_simulations,\n      successes = rbinom(input$n_simulations, input$sample_size, input$true_prop)\n    )\n    \n    # Calculate confidence intervals for each simulation\n    ci_results <- results %>%\n      rowwise() %>%\n      do({\n        ci_data <- calculate_ci(.$successes, input$sample_size, input$conf_level)\n        data.frame(\n          simulation = .$simulation,\n          successes = .$successes,\n          p_hat = ci_data$p_hat,\n          lower = ci_data$lower,\n          upper = ci_data$upper,\n          captures_true = input$true_prop >= ci_data$lower & input$true_prop <= ci_data$upper\n        )\n      })\n    \n    sim_results(ci_results)\n  })\n  \n  # Create the confidence interval plot as a number line\n  output$ci_plot <- renderPlot({\n    req(sim_results())\n    \n    data <- sim_results()\n    \n    # Add y position for each interval (stacked below the number line)\n    data$y_pos <- -(1:nrow(data)) * 0.8\n    \n    # Create the plot\n    p <- ggplot(data) +\n      # Draw the number line at y = 0\n      geom_hline(yintercept = 0, color = \"black\", size = 1) +\n      \n      # Add tick marks on the number line\n      geom_segment(data = data.frame(x = seq(0, 1, 0.1)), \n                   aes(x = x, xend = x, y = -0.03, yend = 0.03),\n                   color = \"black\", size = 0.5) +\n      \n      # Add labels for tick marks\n      geom_text(data = data.frame(x = seq(0, 1, 0.2), label = seq(0, 1, 0.2)), \n                aes(x = x, y = -0.07, label = label),\n                size = 3.5) +\n      \n      # Draw confidence intervals as horizontal segments\n      geom_segment(aes(x = lower, xend = upper, y = y_pos, yend = y_pos,\n                      color = captures_true), \n                  size = 2, alpha = 0.8) +\n      \n      # Add endpoints for confidence intervals\n      geom_point(aes(x = lower, y = y_pos, color = captures_true), size = 1.5) +\n      geom_point(aes(x = upper, y = y_pos, color = captures_true), size = 1.5) +\n      \n      # Add sample proportion points\n      geom_point(aes(x = p_hat, y = y_pos), \n                size = 2, color = \"black\", shape = 16) +\n      \n      # Draw the true proportion as a red vertical line\n      geom_vline(xintercept = input$true_prop, \n                color = \"red\", \n                size = 2, \n                alpha = 0.5) +\n      \n      # Color scheme\n      scale_color_manual(values = c(\"TRUE\" = \"blue\", \"FALSE\" = \"red\"),\n                        name = \"Captures True Proportion\",\n                        labels = c(\"TRUE\" = \"Yes\", \"FALSE\" = \"No\")) +\n      \n      # Set plot limits and labels\n      xlim(0, 1) +\n      ylim(min(data$y_pos) - 1, 1) +\n      # Customize theme\n      theme_minimal() +\n      theme(\n        plot.title = element_text(size = 14, face = \"bold\"),\n        plot.subtitle = element_text(size = 12),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        panel.grid = element_blank(),\n        legend.position = \"bottom\",\n        axis.line.x = element_line(color = \"black\"),\n        plot.margin = margin(20, 20, 20, 20)\n      )\n    \n    # Add simulation numbers on the left\n    p <- p + geom_text(aes(x = -0.05, y = y_pos, label = simulation),\n                      size = 2.5, hjust = 1)\n    \n    # Add title for simulation numbers\n    p <- p + annotate(\"text\", x = -0.05, y = 0.8, label = \"Sim #\", \n                     size = 3, fontface = \"bold\", hjust = 1)\n    \n    p\n  })\n  \n  # Display results table with coverage summary included\n  output$results_table <- renderTable({\n    req(sim_results())\n    \n    data <- sim_results()\n    \n    # Calculate coverage summary\n    coverage_rate <- mean(data$captures_true) * 100\n    expected_coverage <- input$conf_level\n    \n    # Show first 15 simulations and add summary info\n    table_data <- data %>%\n      slice_head(n = 15) %>%\n      mutate(\n        `Sample Prop` = round(p_hat, 3),\n        `CI Lower` = round(lower, 3),\n        `CI Upper` = round(upper, 3),\n        `Captures True` = ifelse(captures_true, \"Yes\", \"No\")\n      ) %>%\n      select(Simulation = simulation, \n             Successes = successes,\n             `Sample Prop`, \n             `CI Lower`, \n             `CI Upper`, \n             `Captures True`)\n    \n    # Add summary row\n    summary_row <- data.frame(\n      Simulation = paste(\"Coverage:\", sum(data$captures_true), \"/\", nrow(data)),\n      Successes = \"\",\n      `Sample Prop` = paste(round(coverage_rate, 1), \"%\"),\n      `CI Lower` = paste(\"Expected:\", expected_coverage, \"%\"),\n      `CI Upper` = \"\",\n      `Captures True` = \"\",\n      check.names = FALSE\n    )\n    \n    rbind(table_data, summary_row)\n  }, striped = TRUE, hover = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
